/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  InheritanceContract,
  InheritanceContractInterface,
} from "../../../contracts/inheritance.sol/InheritanceContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_heir",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FundsWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousHeir",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newHeir",
        type: "address",
      },
    ],
    name: "HeirChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "OWNERSHIP_TRANSFER_DELAY_DAYS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newheir",
        type: "address",
      },
    ],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "heir",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWithdrawalTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_heir",
        type: "address",
      },
    ],
    name: "setHeir",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052604051620010ee380380620010ee8339818101604052810190620000299190620002a0565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200009f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000969190620002e3565b60405180910390fd5b620000b0816200017260201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000123576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011a9062000361565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002819055505062000383565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000268826200023b565b9050919050565b6200027a816200025b565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b600060208284031215620002b957620002b862000236565b5b6000620002c98482850162000289565b91505092915050565b620002dd816200025b565b82525050565b6000602082019050620002fa6000830184620002d2565b92915050565b600082825260208201905092915050565b7f486569722063616e6e6f7420626520746865207a65726f20616464726573732e600082015250565b60006200034960208362000300565b9150620003568262000311565b602082019050919050565b600060208201905081810360008301526200037c816200033a565b9050919050565b610d5b80620003936000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100f857806391f2ebb814610116578063a62c416914610134578063da92d3ae14610152578063f2fde38b1461016e57610093565b806323defc77146100985780632412bfad146100b45780632e1a7d4d146100d2578063715018a6146100ee575b600080fd5b6100b260048036038101906100ad91906108a7565b61018a565b005b6100bc61031b565b6040516100c991906108ed565b60405180910390f35b6100ec60048036038101906100e79190610934565b610322565b005b6100f6610405565b005b610100610419565b60405161010d9190610970565b60405180910390f35b61011e610442565b60405161012b9190610970565b60405180910390f35b61013c610468565b60405161014991906108ed565b60405180910390f35b61016c600480360381019061016791906108a7565b61046e565b005b610188600480360381019061018391906108a7565b61066b565b005b6101926106f1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f8906109e8565b60405180910390fd5b610209610419565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d90610a54565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4e6093f85fa64484abd692810d8a44d508792ff7b7a021d9fbd69fa1c6ff18a0818360405161030f929190610a74565b60405180910390a15050565b62278d0081565b61032a6106f1565b8047101561036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610ae9565b60405180910390fd5b4260028190555061037c610419565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b507feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d6103eb610419565b826040516103fa929190610b09565b60405180910390a150565b61040d6106f1565b6104176000610778565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590610ba4565b60405180910390fd5b62278d0060025461050f9190610bf3565b4211610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790610c73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b690610d05565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002819055507f4e6093f85fa64484abd692810d8a44d508792ff7b7a021d9fbd69fa1c6ff18a0818360405161065f929190610a74565b60405180910390a15050565b6106736106f1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106dc9190610970565b60405180910390fd5b6106ee81610778565b50565b6106f961083c565b73ffffffffffffffffffffffffffffffffffffffff16610717610419565b73ffffffffffffffffffffffffffffffffffffffff16146107765761073a61083c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161076d9190610970565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087482610849565b9050919050565b61088481610869565b811461088f57600080fd5b50565b6000813590506108a18161087b565b92915050565b6000602082840312156108bd576108bc610844565b5b60006108cb84828501610892565b91505092915050565b6000819050919050565b6108e7816108d4565b82525050565b600060208201905061090260008301846108de565b92915050565b610911816108d4565b811461091c57600080fd5b50565b60008135905061092e81610908565b92915050565b60006020828403121561094a57610949610844565b5b60006109588482850161091f565b91505092915050565b61096a81610869565b82525050565b60006020820190506109856000830184610961565b92915050565b600082825260208201905092915050565b7f486569722063616e6e6f7420626520746865207a65726f20616464726573732e600082015250565b60006109d260208361098b565b91506109dd8261099c565b602082019050919050565b60006020820190508181036000830152610a01816109c5565b9050919050565b7f4f776e65722063616e6e6f742062652074686520686569722e00000000000000600082015250565b6000610a3e60198361098b565b9150610a4982610a08565b602082019050919050565b60006020820190508181036000830152610a6d81610a31565b9050919050565b6000604082019050610a896000830185610961565b610a966020830184610961565b9392505050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63652e0000600082015250565b6000610ad3601e8361098b565b9150610ade82610a9d565b602082019050919050565b60006020820190508181036000830152610b0281610ac6565b9050919050565b6000604082019050610b1e6000830185610961565b610b2b60208301846108de565b9392505050565b7f4f6e6c79207468652064657369676e6174656420686569722063616e20636c6160008201527f696d206f776e6572736869702e00000000000000000000000000000000000000602082015250565b6000610b8e602d8361098b565b9150610b9982610b32565b604082019050919050565b60006020820190508181036000830152610bbd81610b81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfe826108d4565b9150610c09836108d4565b9250828201905080821115610c2157610c20610bc4565b5b92915050565b7f546865206f776e6572207374696c6c2068617320636f6e74726f6c2e00000000600082015250565b6000610c5d601c8361098b565b9150610c6882610c27565b602082019050919050565b60006020820190508181036000830152610c8c81610c50565b9050919050565b7f4e657720686569722063616e6e6f7420626520746865207a65726f206164647260008201527f6573732e00000000000000000000000000000000000000000000000000000000602082015250565b6000610cef60248361098b565b9150610cfa82610c93565b604082019050919050565b60006020820190508181036000830152610d1e81610ce2565b905091905056fea2646970667358221220d5af289750f6f1c66ce8dcadf30fa73ee9ef971da8fbc4a129c63d20fa9a45ef64736f6c63430008140033";

type InheritanceContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InheritanceContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InheritanceContract__factory extends ContractFactory {
  constructor(...args: InheritanceContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _heir: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_heir, overrides || {});
  }
  override deploy(
    _heir: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_heir, overrides || {}) as Promise<
      InheritanceContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): InheritanceContract__factory {
    return super.connect(runner) as InheritanceContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InheritanceContractInterface {
    return new Interface(_abi) as InheritanceContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InheritanceContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as InheritanceContract;
  }
}
